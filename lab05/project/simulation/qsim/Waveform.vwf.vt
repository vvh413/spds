// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2021 19:44:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          part1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module part1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUD_ADCDAT;
reg AUD_ADCLRCK;
reg AUD_BCLK;
reg AUD_DACLRCK;
reg CLOCK2_50;
reg CLOCK_50;
reg treg_FPGA_I2C_SDAT;
reg [1:0] KEY;
// wires                                               
wire AUD_DACDAT;
wire AUD_XCK;
wire FPGA_I2C_SCLK;
wire FPGA_I2C_SDAT;

// assign statements (if any)                          
assign FPGA_I2C_SDAT = treg_FPGA_I2C_SDAT;
part1 i1 (
// port map - connection between master ports and signals/registers   
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.CLOCK2_50(CLOCK2_50),
	.CLOCK_50(CLOCK_50),
	.FPGA_I2C_SCLK(FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.KEY(KEY)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 

// AUD_ADCDAT
always
begin
	AUD_ADCDAT = 1'b0;
	AUD_ADCDAT = #20000 1'b1;
	#20000;
end 

// KEY[0]
initial
begin
	KEY[0] = 1'b0;
end 
endmodule

